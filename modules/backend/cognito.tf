data "aws_iam_account_alias" "current" {}
data "aws_region" "current" {}
data "aws_caller_identity" "current" {}

resource "aws_cognito_user_pool" "console" {
  name = var.name

  admin_create_user_config {
    allow_admin_create_user_only = true

    invite_message_template {
      email_message = "<p>Your username is <strong>{username}</strong> and temporary password is <strong>{####}</strong></p><br>Please login here: https://${var.console_cloudfront_dist_domain}/login"
      email_subject = "Temporary credentials"
      sms_message   = "Your username is {username} and temporary password is {####}. Please login here: https://${var.console_cloudfront_dist_domain}/login"
    }
  }

  password_policy {
    minimum_length                   = 12
    require_lowercase                = true
    require_numbers                  = true
    require_symbols                  = true
    require_uppercase                = true
    temporary_password_validity_days = 7
  }

  lambda_config {
    post_confirmation = aws_lambda_function.idp_post_confirm.arn
  }

  schema {
    name                     = "email"
    attribute_data_type      = "String"
    developer_only_attribute = false
    mutable                  = true
    required                 = true
    string_attribute_constraints {
      min_length = 0
      max_length = 2048
    }
  }

  mfa_configuration = "ON"

  user_pool_add_ons {
    advanced_security_mode = "OFF"
  }

  software_token_mfa_configuration {
    enabled = true
  }

  username_configuration {
    case_sensitive = false
  }

  account_recovery_setting {
    recovery_mechanism {
      name     = "verified_email"
      priority = 1
    }
  }

  username_attributes        = ["email"]
  auto_verified_attributes   = ["email"]
  email_verification_subject = "Your ${var.name} verification code"
  email_verification_message = "Your ${var.name} console verification code is <strong>{####}</strong>"
}

resource "aws_cognito_user_group" "Administrators" {
  name         = "Administrators"
  user_pool_id = aws_cognito_user_pool.console.id
  description  = "Managed by Terraform"
}

resource "aws_cognito_user_group" "AllowSMS" {
  name         = "Allow_SMS"
  user_pool_id = aws_cognito_user_pool.console.id
  description  = "Managed by Terraform"
}

resource "aws_cognito_user_group" "Staff" {
  name         = "Staff"
  user_pool_id = aws_cognito_user_pool.console.id
  description  = "Managed by Terraform"
}

resource "aws_cognito_user_group" "External_users" {
  name         = "External_Users"
  user_pool_id = aws_cognito_user_pool.console.id
  description  = "Managed by Terraform"
}

resource "aws_cognito_user_group" "cognito_test" {
  name         = "${aws_cognito_user_pool.console.id}_${aws_cognito_identity_provider.cognito_test.provider_name}"
  user_pool_id = aws_cognito_user_pool.console.id
  description  = "Autogenerated group for users who sign in using ${aws_cognito_identity_provider.cognito_test.provider_name}"
}

resource "random_string" "console" {
  length  = 6
  special = false
  upper   = false
}

resource "aws_cognito_user_pool_client" "console" {
  name                                 = "${var.name}-app"
  user_pool_id                         = aws_cognito_user_pool.console.id
  refresh_token_validity               = 1
  generate_secret                      = false
  allowed_oauth_flows_user_pool_client = true
  write_attributes                     = ["email", "phone_number", "family_name", "given_name"]
  prevent_user_existence_errors        = "ENABLED"
  callback_urls                        = ["http://localhost:3000/", "https://${var.console_cloudfront_dist_domain}/"]
  logout_urls                          = ["http://localhost:3000/", "https://${var.console_cloudfront_dist_domain}/"]
  allowed_oauth_scopes                 = ["phone", "email", "openid", "aws.cognito.signin.user.admin", "profile"]
  allowed_oauth_flows                  = ["code"]
  read_attributes                      = ["profile", "email", "email_verified", "phone_number", "phone_number_verified", "family_name", "given_name"]
  explicit_auth_flows                  = ["ALLOW_ADMIN_USER_PASSWORD_AUTH", "ALLOW_USER_SRP_AUTH", "ALLOW_REFRESH_TOKEN_AUTH"]
  supported_identity_providers         = ["COGNITO", aws_cognito_identity_provider.cognito_test.provider_name]
}

resource "aws_cognito_user_pool_domain" "console" {
  domain       = "${lower(var.name)}-${lower(random_string.console.result)}"
  user_pool_id = aws_cognito_user_pool.console.id
}

resource "aws_iam_role" "cognito_sms" {
  name = "${var.name}-CognitoSMSRole"

  assume_role_policy = <<-EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "cognito-idp.amazonaws.com"
      },
      "Action": "sts:AssumeRole",
      "Condition": {
        "StringEquals": {
          "sts:ExternalId": "${var.name}_cognito_sms_role_external_id"
        }
      }
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "cognito_sms" {
  name = "${var.name}-CognitoSMSRole"
  role = aws_iam_role.cognito_sms.id

  policy = <<-EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "sns:Publish"
            ],
            "Resource": "*",
            "Effect": "Allow"
        }
    ]
}
  EOF
}

resource "aws_iam_role" "cognito_authorized" {
  name = "${var.name}-CognitoAuthorizedRole"

  assume_role_policy = <<-EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "cognito-identity.amazonaws.com"
      },
      "Action": "sts:AssumeRoleWithWebIdentity"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "cognito_authorized" {
  name = "${var.name}-CognitoAuthorizedRole"
  role = aws_iam_role.cognito_authorized.id

  policy = <<-EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "execute-api:Invoke"
            ],
            "Resource": "*",
            "Effect": "Allow"
        }
    ]
}
  EOF
}

resource "aws_iam_role" "cognito_unauthorized" {
  name = "${var.name}-CognitoUnAuthorizedRole"

  assume_role_policy = <<-EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "cognito-identity.amazonaws.com"
      },
      "Action": "sts:AssumeRoleWithWebIdentity"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "cognito_unauthorized" {
  name = "${var.name}-CognitoUnAuthorizedRole"
  role = aws_iam_role.cognito_unauthorized.id

  policy = <<-EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "execute-api:Invoke"
            ],
            "Resource": "*",
            "Effect": "Allow"
        }
    ]
}
  EOF
}

resource "aws_cognito_identity_pool" "console" {
  identity_pool_name               = var.name
  allow_unauthenticated_identities = false

  cognito_identity_providers {
    client_id               = aws_cognito_user_pool_client.console.id
    provider_name           = "cognito-idp.${data.aws_region.current.name}.amazonaws.com/${aws_cognito_user_pool.console.id}"
    server_side_token_check = false
  }
}

resource "aws_cognito_identity_pool_roles_attachment" "console" {
  identity_pool_id = aws_cognito_identity_pool.console.id

  roles = {
    "authenticated"   = aws_iam_role.cognito_authorized.arn
    "unauthenticated" = aws_iam_role.cognito_unauthorized.arn
  }
}

data "template_file" "metadata" {
  template = file("${abspath(path.module)}/FederationMetadata.xml")
}

resource "aws_cognito_identity_provider" "cognito_test" {
  user_pool_id  = aws_cognito_user_pool.console.id
  provider_name = "CognitoADFSTest"
  provider_type = "SAML"

  provider_details = {
    MetadataFile          = data.template_file.metadata.rendered
    SLORedirectBindingURI = "ignored" # These values are set from the metadata file this is just to avoid terraform wanting to null them in subsequent runs
    SSORedirectBindingURI = "ignored" # These values are set from the metadata file this is just to avoid terraform wanting to null them in subsequent runs
  }

  attribute_mapping = {
    email = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
  }

  lifecycle {
    ignore_changes = [
      provider_details["SLORedirectBindingURI"],
      provider_details["SSORedirectBindingURI"]
    ]
  }
}


resource "null_resource" "console_admin_user" {
  triggers = {
    user_pool_id = aws_cognito_user_pool.console.id
  }

  provisioner "local-exec" {
    command = var.aws_cli_profile_name != "" ? "aws cognito-idp admin-create-user --user-pool-id ${aws_cognito_user_pool.console.id} --username ${var.initial_admin_email_address} --user-attributes Name=email,Value=${var.initial_admin_email_address} Name=email_verified,Value='True' --profile ${var.aws_cli_profile_name}" : "aws cognito-idp admin-create-user --user-pool-id ${aws_cognito_user_pool.console.id} --username ${var.initial_admin_email_address} --user-attributes Name=email,Value=${var.initial_admin_email_address} Name=email_verified,Value='True'"
  }
}
